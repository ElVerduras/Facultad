
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void print_binint(unsigned int); //imprime en binario un entero
unsigned int decBin(unsigned int, unsigned int); //pasa una el valor de una variable entera a binario en la misma variable
unsigned long long calc_Sup(unsigned int); //calcula la superficie de un circulo

int main(){

    char               radio_aux[5]; //almacena la parte fraccional del numero ingresado por el usuario
    unsigned int       radio_ent;
    unsigned int       radio_frac[5]; //almacena la parte fraccional al procesar radio_aux
    unsigned int       radio_ent32 = 0; //almacena la parte entera de 32b
    unsigned int       radio_frac32 = 0; //almacena la parte fraccional de 32b
    unsigned int       radio; //almacena el numero decimal en 32b
    unsigned long long superficie = 0; //almacena la superficie en 64b
    int                aux = 1; // "booleano de confirmacion para el ingreso de datos"

    //----------------------|Carga de valores|-----------------------------

    while(aux){
        printf("Ingrese el valor del radio, r (r<32.767,99999 y r>=0,00001). Use como separador el punto ('.') \n");
        scanf("%u.%s", &radio_ent, radio_aux);
        if(radio_ent > 32767) {
                aux = 1;
                printf("Parte entera mas chica\n");
        } else if (radio_ent == 32767 && strcmp(radio_aux, "99999") > 0) {
                printf("Parte decimal mas chica\n");
                aux = 1;
            } else if(radio_ent < 0 ) {
                    printf("Parte entera mas grande\n");
                    aux = 1;
                } else if(radio_ent == 0 && strcmp(radio_aux, "00001") < 0) {
                        printf("Parte decimal mas grande\n");
                        aux = 1;
                    } else aux = 0;
    }

    //-----------|inicializacion y carga del fraccional|---------------------

    int i;
    for (i = 0; i < 5; i++){
        radio_frac[i] = 0;
    }
    int j = 0;
    while(radio_aux[j] != '\0'){
        radio_frac[j] = (unsigned int) radio_aux[j] - 48;
        j++;
    }
    printf("decimal vectorizado: ");
    for (i = 0; i < j; i++){
        printf("%u", radio_frac[i]);
    }

    //--------------|fraccional de vector >> integer|-------------------------

    int a;
    int f = 10000;
    for (a = 0; a< 5; a++){
        radio_frac32 += radio_frac[a] * f;
        f /= 10;
    }
    radio = decBin(radio_frac32, radio_ent);

    //------------------|calculo de superficie|-------------------------------

    printf("Radio binario: \n"); print_binint(radio);

    superficie = calc_Sup(radio);

    printf("superficie: %llu\n", superficie);
    printf("superficie binario: \n"); print_bin64int(superficie);

    binEnt(superficie);
    return 0;
}

unsigned int decBin(unsigned int dig,  unsigned int radio_ent)
{
    radio_ent = radio_ent << 17;
    unsigned int potencia = 65536; //2^************************
    unsigned int aux = dig;
    unsigned int decimal = 0;

    while(aux != 0  &&  potencia != 0){
        aux *= 2;
        if(aux >= 100000){ //el numero se trata como si fuese la parte fraccional
            decimal += potencia;
            aux= aux - 100000;
        }
        potencia = potencia / 2;
    }

    printf("Entero: \n"); print_binint(radio_ent);
    printf("Fraccion: \n"); print_binint(decimal);

    unsigned int radio = (radio_ent | decimal);//hacemos un or para que se unan-
    printf("Radio: %u\n", radio);

    return radio;
}

void print_binint(unsigned int num)
{
    unsigned i;

    for (i = 1 << 31; i > 0; i = i / 2)
        (num & i) ? printf("1") : printf("0");

    printf("\n");
}

void print_bin64int(unsigned long long num)
{
    unsigned long long i;
    unsigned long long n = num;
    long long c;
    unsigned long long k;
    int j=0;

        //printf("%llu in binary is:\n", n);

    for (c = 63; c >= 0; c--)
    {
        k = n >> c;

        if (k & 1)
            printf("1");
        else
            printf("0");
        j++;
        if (j == 30) printf(".");
    }

    printf("\n");
}


unsigned long long calc_Sup(unsigned int rad)
{
    unsigned int pi = 0b00000000000001100100100001111110; //3.14159
    unsigned long long pi_64 = pi; printf("\npi_64"); print_bin64int(pi_64);
    unsigned long long rad_64 = rad;printf("\nRAD_64"); print_bin64int(rad_64);
    unsigned long long resultado = pi_64 * rad_64;  //primera parte del calculo

    printf("pi * radio: %llu\n",resultado);
    printf("pi * radio binario: \n"); print_bin64int(resultado);

    resultado = resultado >> 17;

    printf("resultado >> 17: %llu\n", resultado);
    printf("resultado >> 17 binario: \n"); print_bin64int(resultado);

    printf("000000000000000000000000000000\n");
    return (resultado * rad_64);;
}

unsigned long long transf(unsigned long long num)
{
    long long int c;
    long long unsigned int k;
    int j=0;
    int i;
    unsigned long long decimal=0;
    unsigned long long potencias[34];

    potencias[0] = 500000000000;

    for (i = 1;i < 34; i++) potencias[i] = potencias[i-1] / 2;

    for (c = 63; c >= 0; c--)
    {
        k = num >> c;
        if (k & 1) decimal += potencias[j];
        j++;
    }

    printf("\n");
    return decimal;
}

void binEnt(unsigned long long num)
{
    unsigned long long entero = num >> 34;
    unsigned long long decimal = num << 30;

    printf("\n");
    printf("\n superficie: %u.%llu", entero, transf(decimal));

}




